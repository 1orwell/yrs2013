pygame.mixer
pygame module for loading and playing sounds

This module contains classes for loading Sound objects and controlling
playback. The mixer module is optional and depends on SDL_mixer. Your
program should test that pygame.mixer is available and intialized before
using it.

The mixer module has a limited number of channels for playback of sounds.
Usually programs tell pygame to start playing audio and it selects an
available channel automatically. The default is 8 simultaneous channels,
but complex programs can get more precise control over the number of
channels and their use.

All sound playback is mixed in background threads. When you begin
to play a Sound object, it will return immediately while the sound
continues to play. A single Sound object can also be actively played
back multiple times.

The mixer also has a special streaming channel. This is for music
playback and is accessed through the pygame.mixer.music module.

The mixer module must be initialized like other pygame modules, but it has
some extra conditions. The pygame.mixer.init() function takes several
optional arguments to control the playback rate and sample size. Pygame
will default to reasonable values, but pygame cannot perform Sound
resampling, so the mixer should be initialized to match the values of
your audio resources.

NOTE: Not to get less laggy sound, use a smaller buffer size.  The default
is set to reduce the chance of scratchy sounds on some computers.  You can 
change the default buffer by calling pygame.mixer.pre_init before 
pygame.mixer.init or pygame.init is called.  For example:
pygame.mixer.pre_init(44100,-16,2, 1024)
The default size was changed from 1024 to 3072 in pygame 1.8.
<SECTION>

init
initialize the mixer module
pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=4096): return None

Initialize the mixer module for Sound loading and playback. The default
arguments can be overridden to provide specific audio mixing. Keyword
arguments are accepted. For backward compatibility where an argument is
set zero the default value is used (possible changed by a pre_init call).

The size argument represents how many bits are used for each audio sample.
If the value is negative then signed sample values will be used. Positive
values mean unsigned audio samples will be used. An invalid value raises
an exception.

The channels argument is used to specify whether to use mono or stereo.  1 for 
mono and 2 for stereo. No other values are supported (negative values are treated
as 1, values greater than 2 as 2).

The buffer argument controls the number of internal samples used in the
sound mixer. The default value should work for most cases. It can be
lowered to reduce latency, but sound dropout may occur. It can be raised
to larger values to ensure playback never skips, but it will impose latency
on sound playback. The buffer size must be a power of two (if not it is
rounded up to the next nearest power of 2). 

Some platforms require the pygame.mixer module
to be initialized after the display modules have initialized. The top level
pygame.init() takes care of this automatically, but cannot pass any
arguments to the mixer init. To solve this, mixer has a function
pygame.mixer.pre_init() to set the proper defaults before the toplevel
init is used.

It is safe to call this more than once, but after the mixer is
initialized you cannot change the playback arguments without first
calling pygame.mixer.quit().
<END>

pre_init
preset the mixer init arguments
pygame.mixer.pre_init(frequency=22050, size=-16, channels=2, buffersize=4096): return None

Call pre_init to change the defaults used when the real pygame.mixer.init()
is called. Keyword arguments are accepted. The best way to set custom mixer
playback values is to call pygame.mixer.pre_init() before calling the top
level pygame.init(). For backward compatibility argument values of zero is
replaced with the startup defaults.
<END>

quit
uninitialize the mixer
pygame.mixer.quit(): return None

This will uninitialize pygame.mixer. All playback will stop and any loaded
Sound objects may not be compatible with the mixer if it is reinitialized later.
<END>

get_init
test if the mixer is initialized
pygame.mixer.get_init(): return (frequency, format, channels)

If the mixer is initialized, this returns the playback arguments it 
is using. If the mixer has not been initialized this returns None
<END>

stop
stop playback of all sound channels
pygame.mixer.stop(): return None

This will stop all playback of all active mixer channels.
<END>

pause
temporarily stop playback of all sound channels
pygame.mixer.pause(): return None

This will temporarily stop all playback on the active mixer channels.
The playback can later be resumed with pygame.mixer.unpause()
<END>

unpause
resume paused playback of sound channels
pygame.mixer.unpause(): return None

This will resume all active sound channels after they have been paused.
<END>

fadeout
fade out the volume on all sounds before stopping
pygame.mixer.fadeout(time): return None

This will fade out the volume on all active channels over the time 
argument in milliseconds. After the sound is muted the playback will stop.
<END>

set_num_channels
set the total number of playback channels
pygame.mixer.set_num_channels(count): return None

Sets the number of available channels for the mixer. The default value is
8. The value can be increased or decreased. If the value is decreased,
sounds playing on the truncated channels are stopped.
<END>

get_num_channels
get the total number of playback channels

Returns the number of currently active playback channels.
<END>

set_reserved
reserve channels from being automatically used
pygame.mixer.set_reserved(count): return None

The mixer can reserve any number of channels that will not be automatically
selected for playback by Sounds. If sounds are currently playing on the
reserved channels they will not be stopped.

This allows the application to reserve a specific number of channels for
important sounds that must not be dropped or have a guaranteed channel to
play on.
<END>

find_channel
find an unused channel
pygame.mixer.find_channel(force=False): return Channel

This will find and return an inactive Channel object. If there are no
inactive Channels this function will return None. If there are no inactive
channels and the force argument is True, this will find the Channel with
the longest running Sound and return it.

If the mixer has reserved channels from pygame.mixer.set_reserved() then
those channels will not be returned here.
<END>

get_busy
test if any sound is being mixed
pygame.mixer.get_busy(): return bool

Returns True if the mixer is busy mixing any channels. If the mixer is
idle then this return False.
<END>

Sound
Create a new Sound object from a file
pygame.mixer.Sound(filename): return Sound
pygame.mixer.Sound(buffer): return Sound
pygame.mixer.Sound(object): return Sound

Load a new sound buffer from a filename, a python file object or a
readable buffer object. Limited resampling will be performed to help the
sample match the initialize arguments for the mixer.

The Sound object represents actual sound sample data. Methods that change
the state of the Sound object will the all instances of the Sound playback.

The Sound can be loaded from an OGG audio file or from an uncompressed
WAV.

Note: The buffer will be copied internally, no data will be shared
between it and the Sound object.

pygame.mixer.Sound(buffer) is new in pygame 1.8
<SECTION>

play
begin sound playback
Sound.play(loops=0, maxtime=0, fade_ms=0): return Channel

Begin playback of the Sound (i.e., on the computer's speakers) on an
available Channel. This will forcibly select
a Channel, so playback may cut off a currently playing sound if necessary.

The loops argument controls how many times the sample will be repeated after
being played the first time. A value
of 5 means that the sound will be played once, then repeated five times, and so
is played a total of six times. The default value (zero) means the Sound
is not repeated, and so is only played once. If loops is set to -1 the Sound 
will loop indefinitely (though you can still call stop() to stop it).

The maxtime argument can be used to stop playback after a given number of
milliseconds.

The fade_ms argument will make the sound start playing at 0 volume and 
fade up to full volume over the time given. The sample may end before the
fade-in is complete.
 
This returns the Channel object for the channel that was selected.
<END>

stop
stop sound playback
Sound.stop(): return None

This will stop the playback of this Sound on any active Channels.
<END>

fadeout
stop sound playback after fading out
Sound.fadeout(time): return None

This will stop playback of the sound after fading it out over the 
time argument in milliseconds. The Sound will fade and stop on all
actively playing channels.
<END>

set_volume
set the playback volume for this Sound
Sound.set_volume(value): return None

This will set the playback volume (loudness) for this Sound. This will immediately
affect the Sound if it is playing. It will also affect any future playback
of this Sound. The argument is a value from 0.0 to 1.0.
<END>

get_volume
get the playback volume
Sound.get_volume(): return value

Return a value from 0.0 to 1.0 representing the volume for this Sound.
<END>

get_num_channels
count how many times this Sound is playing
Sound.get_num_channels(): return count

Return the number of active channels this sound is playing on.
<END>

get_length
get the length of the Sound
Sound.get_length(): return seconds

Return the length of this Sound in seconds.
<END>

get_buffer
acquires a buffer object for the sameples of the Sound.
Sound.get_buffer(): return BufferProxy

Return a buffer object for the Sound samples. The buffer can be
used for direct access and manipulation.

New in pygame 1.8.
<END>
<END>

Channel
Create a Channel object for controlling playback
pygame.mixer.Channel(id): return Channel

Return a Channel object for one of the current channels. The id must
be a value from 0 to the value of pygame.mixer.get_num_channels().

The Channel object can be used to get fine control over the playback
of Sounds. A channel can only playback a single Sound at time. Using
channels is entirely optional since pygame can manage them by default.
<SECTION>

play
play a Sound on a specific Channel
Channel.play(Sound, loops=0, maxtime=0, fade_ms=0): return None

This will begin playback of a Sound on a specific Channel. If the Channel
is currently playing any other Sound it will be stopped.

The loops argument has the same meaning as in Sound.play(): it is the
number of times to repeat the sound after the first time. If it is
3, the sound will be played 4 times (the first time, then three more).
If loops is -1 then the playback will repeat indefinitely.

As in Sound.play(), the maxtime argument can be used to
stop playback of the Sound after a given number of milliseconds.

As in Sound.play(), the fade_ms argument can be used fade in the sound.
<END>

stop
stop playback on a Channel
Channel.stop(): return None

Stop sound playback on a channel. After playback is stopped the channel
becomes available for new Sounds to play on it.
<END>

pause
temporarily stop playback of a channel
Channel.pause(): return None

Temporarily stop the playback of sound on a channel. It can be resumed at
a later time with Channel.unpause()
<END>

unpause
resume pause playback of a channel
Channel.unpause(): return None

Resume the playback on a paused channel.
<END>

fadeout
stop playback after fading channel out
Channel.fadeout(time): return None

Stop playback of a channel after fading out the sound over the given
time argument in milliseconds.
<END>

set_volume
set the volume of a playing channel
Channel.set_volume(value): return None
Channel.set_volume(left, right): return None

Set the volume (loudness) of a playing sound. When a channel starts to play its
volume value is reset. This only affects the current sound. The value
argument is between 0.0 and 1.0.

If one argument is passed, it will be the volume of both speakers.
If two arguments are passed and the mixer is in stereo mode, the
first argument will be the volume of the left speaker and the second
will be the volume of the right speaker. (If the second argument is
None, the first argument will be the volume of both speakers.)

If the channel is playing a Sound on which set_volume() has also
been called, both calls are taken into account. For example:

    sound = pygame.mixer.Sound("s.wav")
    channel = s.play()      # Sound plays at full volume by default
    sound.set_volume(0.9)   # Now plays at 90% of full volume.
    sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
    channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).
<END>

get_volume
get the volume of the playing channel
Channel.get_volume(): return value

Return the volume of the channel for the current playing sound. This
does not take into account stereo separation used by Channel.set_volume.
The Sound object also has its own volume which is mixed with the channel.
<END>

get_busy
check if the channel is active
Channel.get_busy(): return bool

Returns true if the channel is activily mixing sound. If the channel is
idle this returns False.
<END>

get_sound
get the currently playing Sound
Channel.get_sound(): return Sound

Return the actual Sound object currently playing on this channel. If the
channel is idle None is returned.
<END>

queue
queue a Sound object to follow the current
Channel.queue(Sound): return None

When a Sound is queued on a Channel, it will begin playing immediately
after the current Sound is finished. Each channel can only have a single
Sound queued at a time. The queued Sound will only play if the current
playback finished automatically. It is cleared on any other call to
Channel.stop() or Channel.play().

If there is no sound actively playing on the Channel then the Sound
will begin playing immediately.
<END>

get_queue
return any Sound that is queued
Channel.get_queue(): return Sound

If a Sound is already queued on this channel it will be returned. Once
the queued sound begins playback it will no longer be on the queue.
<END>

set_endevent
have the channel send an event when playback stops
Channel.set_endevent(): return None
Channel.set_endevent(type): return None

When an endevent is set for a channel, it will send an event to the pygame
queue every time a sound finishes playing on that channel (not just the
first time). Use pygame.event.get() to retrieve the endevent once it's sent.

Note that if you called Sound.play(n) or Channel.play(sound,n), the end event is
sent only once: after the sound has been played "n+1" times (see the
documentation of Sound.play).

If Channel.stop() or Channel.play() is called while the sound was still
playing, the event will be posted immediately.

The type argument will be the event id sent to the queue. This can be
any valid event type, but a good choice would be a value between
pygame.locals.USEREVENT and pygame.locals.NUMEVENTS.
If no type argument is given then the Channel will stop sending endevents.
<END>

get_endevent
get the event a channel sends when playback stops
Channel.get_endevent(): return type

Returns the event type to be sent every time the Channel finishes playback
of a Sound. If there is no endevent the function returns pygame.NOEVENT.
<END>
<END>
<END>
