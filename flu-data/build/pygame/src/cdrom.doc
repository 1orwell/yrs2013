pygame.cdrom
pygame module for audio cdrom control

The cdrom module manages the CD and DVD drives on a computer. It can
also control the playback of audio cd's. This module needs to be initialized
before it can do anything. Each CD object you create represents a cdrom drive
and must also be initialized individually before it can do most things.
<SECTION>



init
initialize the cdrom module
pygame.cdrom.init(): return None

Initialize the cdrom module. This will scan the system for all CD devices. The
module must be initialized before any other functions will work. This
automatically happens when you call pygame.init().

It is safe to call this function more than once.
<END>



quit
uninitialize the cdrom module
pygame.cdrom.quit(): return None

Uninitialize the cdrom module. After you call this any existing CD objects
will no longer work.

It is safe to call this function more than once.
<END>



get_init
true if the cdrom module is initialized
pygame.cdrom.get_init(): return bool

Test if the cdrom module is initialized or not. This is different than the
CD.init() since each drive must also be initialized individually.

<END>



get_count
number of cd drives on the system
pygame.cdrom.get_count(): return count

Return the number of cd drives on the system. When you create CD objects
you need to pass an integer id that must be lower than this count. The
count will be 0 if there are no drives on the system.
<END>



CD
class to manage a cdrom drive
pygame.cdrom.CD(id): return CD

You can create a CD object for each cdrom on the system. Use
pygame.cdrom.get_count() to determine how many drives actually exist. The id
argument is an integer of the drive, starting at zero.

The CD object is not initialized, you can only call CD.get_id() and
CD.get_name() on an uninitialized drive.

It is safe to create multiple CD objects for the same drive, they will all
cooperate normally.
<SECTION>



init
initialize a cdrom drive for use
CD.init(): return None

Initialize the cdrom drive for use. The drive must be initialized for most CD
methods to work.  Even if the rest of pygame has been initialized.

There may be a brief pause while the drive is initialized. Avoid CD.init()
if the program should not stop for a second or two.
<END>


quit
uninitialize a cdrom drive for use
CD.quit(): return None

Uninitialize a drive for use. Call this when your program will not be accessing
the drive for awhile.
<END>



get_init
true if this cd device initialized
CD.get_init(): return bool

Test if this CDROM device is initialized. This is different than the
pygame.cdrom.init() since each drive must also be initialized individually.
<END>



play
start playing audio
CD.play(track, start=None, end=None): return None

Playback audio from an audio cdrom in the drive. Besides the track number
argument, you can also pass a starting and ending time for playback. The start
and end time are in seconds, and can limit the section of an audio track played.

If you pass a start time but no end, the audio will play to the end of the
track. If you pass a start time and 'None' for the end time, the audio will play
to the end of the entire disc.

See the CD.get_numtracks() and CD.get_track_audio() to find tracks to playback.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>


stop
stop audio playback
CD.stop(): return None

Stops playback of audio from the cdrom. This will also lose the current playback
position. This method does nothing if the drive isn't already playing audio.
<END>



pause
temporarily stop audio playback
CD.pause(): return None

Temporarily stop audio playback on the CD. The playback can be resumed at the
same point with the CD.resume() method. If the CD is not playing this method
does nothing.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>



resume
unpause audio playback
CD.resume(): return None

Unpause a paused CD. If the CD is not paused or already playing, this method
does nothing.
<END>



eject
eject or open the cdrom drive
CD.eject(): return None

This will open the cdrom drive and eject the cdrom. If the drive is playing or
paused it will be stopped.
<END>



get_id
the index of the cdrom drive
CD.get_id(): return id

Returns the integer id that was used to create the CD instance. This method can
work on an uninitialized CD.
<END>



get_name
the system name of the cdrom drive
CD.get_name(): return name

Return the string name of the drive. This is the system name used to represent
the drive. It is often the drive letter or device name. This method can work on
an uninitialized CD.
<END>



get_busy
true if the drive is playing audio
CD.get_busy(): return bool

Returns True if the drive busy playing back audio.
<END>



get_paused
true if the drive is paused
CD.get_paused(): return bool

Returns True if the drive is currently paused.
<END>



get_current
the current audio playback position
CD.get_current(): return track, seconds

Returns both the current track and time of that track. This method works when
the drive is either playing or paused.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>



get_empty
False if a cdrom is in the drive
CD.get_empty(): return bool

Return False if there is a cdrom currently in the drive. If the drive is
empty this will return True.
<END>



get_numtracks
the number of tracks on the cdrom
CD.get_numtracks(): return count

Return the number of tracks on the cdrom in the drive. This will return zero of
the drive is empty or has no tracks.
<END>



get_track_audio
true if the cdrom track has audio data
CD.get_track_audio(track): return bool

Determine if a track on a cdrom contains audio data. You can also call
CD.num_tracks() and CD.get_all() to determine more information about the cdrom.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>



get_all
get all track information
CD.get_all(): return [(audio, start, end, lenth), ...]

Return a list with information for every track on the cdrom. The information
consists of a tuple with four values. The audio value is True if the track
contains audio data. The start, end, and length values are floating point
numbers in seconds. Start and end represent absolute times on the entire disc.
<END>


get_track_start
start time of a cdrom track
CD.get_track_start(track): return seconds

Return the absolute time in seconds where at start of the cdrom track.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>




get_track_length
length of a cdrom track
CD.get_track_length(track): return seconds

Return a floating point value in seconds of the length of the cdrom track.

Note, track 0 is the first track on the CD.  Track numbers start at zero.
<END>
<END>
<END>
